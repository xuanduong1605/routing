####################################################
# DVrouter.py
# Name:
# HUID:
#####################################################

from router import Router
import json
from packet import Packet
import heapq

class DVrouter(Router):
    """Distance vector routing protocol implementation.

    Add your own class fields and initialization code (e.g. to create forwarding table
    data structures). See the `Router` base class for docstrings of the methods to
    override.
    """

    def __init__(self, addr, heartbeat_time):
        Router.__init__(self, addr)  # Initialize base class - DO NOT REMOVE
        self.heartbeat_time = heartbeat_time
        self.last_time = 0
        # TODO
        self.distance = {self.addr: 0}
        self.forwarding_table = {}
        self.neighbors = {}

    def broadcast_update(self):
        """Send current distance vector to all neighbors."""
        content = json.dumps(self.distance)
        for port in list(self.links):
            packet = Packet(Packet.ROUTING, self.addr, None, content)
            self.send(port, packet)

    def handle_packet(self, port, packet):
        """Process incoming packet."""
        # TODO
        if packet.is_traceroute:
            # Hint: this is a normal data packet
            # If the forwarding table contains packet.dst_addr
            #   send packet based on forwarding table, e.g., self.send(port, packet)
            dst = packet.dst_addr
            if dst != self.addr and dst in self.forwarding_table:
                self.send(self.forwarding_table[dst], packet)
        else:
            # Hint: this is a routing packet generated by your routing protocol
            # If the received distance vector is different
            #   update the local copy of the distance vector
            #   update the distance vector of this router
            #   update the forwarding table
            #   broadcast the distance vector of this router to neighbors
            _, neighbor_cost = self.neighbors[port]
            neighbor_dv = json.loads(packet.content)
            updated = False
            for dest, cost_to_dest in neighbor_dv.items():
                if dest == self.addr:
                    continue
                new_cost = neighbor_cost + cost_to_dest
                old_cost = self.distance.get(dest, float("inf"))
                if new_cost < old_cost:
                    self.distance[dest] = new_cost
                    self.forwarding_table[dest] = port
                    updated = True
            if updated:
                self.broadcast_update()

    def handle_new_link(self, port, endpoint, cost):
        """Handle new link."""
        # TODO
        #   update the distance vector of this router
        #   update the forwarding table
        #   broadcast the distance vector of this router to neighbors
        self.neighbors[port] = (endpoint, cost)
        self.distance[endpoint] = cost
        self.forwarding_table[endpoint] = port
        self.broadcast_update()

    def handle_remove_link(self, port):
        """Handle removed link."""
        # TODO
        #   update the distance vector of this router
        #   update the forwarding table
        #   broadcast the distance vector of this router to neighbors
        if port in self.neighbors:
            _, _ = self.neighbors.pop(port)
            # clear routes that used this port
            for dest, p in list(self.forwarding_table.items()):
                if p == port:
                    del self.forwarding_table[dest]
                    self.distance[dest] = float("inf")
            self.broadcast_update()

    def handle_time(self, time_ms):
        """Handle current time."""
        if time_ms - self.last_time >= self.heartbeat_time:
            self.last_time = time_ms
            # TODO
            #   broadcast the distance vector of this router to neighbors
            self.broadcast_update()

    def __repr__(self):
        """Representation for debugging in the network visualizer."""
        # TODO
        #   NOTE This method is for your own convenience and will not be graded
        return f"DVrouter(addr={self.addr})"
